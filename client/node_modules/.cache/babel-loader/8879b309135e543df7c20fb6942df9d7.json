{"ast":null,"code":"import _taggedTemplateLiteral from \"/home/poncho/Documents/PROJET/moonboard-project/client/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _regeneratorRuntime from \"/home/poncho/Documents/PROJET/moonboard-project/client/node_modules/@babel/runtime/regenerator\";\nimport _slicedToArray from \"/home/poncho/Documents/PROJET/moonboard-project/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _asyncToGenerator from \"/home/poncho/Documents/PROJET/moonboard-project/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/poncho/Documents/PROJET/moonboard-project/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/poncho/Documents/PROJET/moonboard-project/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/poncho/Documents/PROJET/moonboard-project/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/poncho/Documents/PROJET/moonboard-project/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/poncho/Documents/PROJET/moonboard-project/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/poncho/Documents/PROJET/moonboard-project/client/src/components/Admin/UlploadImage.js\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation($file: Upload!) {\\n    singleUpload(file: $file) {\\n      id\\n      path\\n      filename\\n      mimetype\\n      encoding\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { Component } from 'react';\nimport gql from 'graphql-tag';\nimport { graphql } from 'react-apollo';\nimport Dropzone from 'react-dropzone';\n\nvar UploadImage =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(UploadImage, _Component);\n\n  function UploadImage() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, UploadImage);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(UploadImage)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.onDrop =\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(_ref) {\n        var _ref3, file, response;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _ref3 = _slicedToArray(_ref, 1), file = _ref3[0];\n                _context.next = 3;\n                return _this.props.mutate({\n                  variables: {\n                    file: file\n                  }\n                });\n\n              case 3:\n                response = _context.sent;\n                console.log(response);\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    return _this;\n  }\n\n  _createClass(UploadImage, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Dropzone, {\n        onDrop: this.onDrop,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 15\n        },\n        __self: this\n      }, \"Arrastre aqui un archivo\");\n    }\n  }]);\n\n  return UploadImage;\n}(Component);\n\nexport default graphql(gql(_templateObject()))(UploadImage);","map":{"version":3,"sources":["/home/poncho/Documents/PROJET/moonboard-project/client/src/components/Admin/UlploadImage.js"],"names":["React","Component","gql","graphql","Dropzone","UploadImage","onDrop","file","props","mutate","variables","response","console","log"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,OAAT,QAAwB,cAAxB;AACA,OAAOC,QAAP,MAAqB,gBAArB;;IAEMC,W;;;;;;;;;;;;;;;;;;UACJC,M;;;;;+BAAS;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,iDAAQC,IAAR;AAAA;AAAA,uBACgB,MAAKC,KAAL,CAAWC,MAAX,CAAkB;AACvCC,kBAAAA,SAAS,EAAE;AAAEH,oBAAAA,IAAI,EAAJA;AAAF;AAD4B,iBAAlB,CADhB;;AAAA;AACDI,gBAAAA,QADC;AAIPC,gBAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;;AAJO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;;6BAOA;AACP,aAAO,oBAAC,QAAD;AAAU,QAAA,MAAM,EAAE,KAAKL,MAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCAAP;AACD;;;;EAVuBL,S;;AAa1B,eAAeE,OAAO,CAACD,GAAD,oBAAP,CAUZG,WAVY,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport gql from 'graphql-tag';\nimport { graphql } from 'react-apollo';\nimport Dropzone from 'react-dropzone';\n\nclass UploadImage extends Component {\n  onDrop = async ([file]) => {\n    const response = await this.props.mutate({\n      variables: { file }\n    });\n    console.log(response);\n  };\n\n  render() {\n    return <Dropzone onDrop={this.onDrop}>Arrastre aqui un archivo</Dropzone>;\n  }\n}\n\nexport default graphql(gql`\n  mutation($file: Upload!) {\n    singleUpload(file: $file) {\n      id\n      path\n      filename\n      mimetype\n      encoding\n    }\n  }\n`)(UploadImage);\n"]},"metadata":{},"sourceType":"module"}